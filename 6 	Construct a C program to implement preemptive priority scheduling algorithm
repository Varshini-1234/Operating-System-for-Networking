#include <stdio.h>

struct Process {
    int id;
    int burst_time;
    int priority;
};

void sortProcesses(struct Process proc[], int n) {
    struct Process temp;
    for (int i = 0; i < n - 1; i++) {
        for (int j = 0; j < n - i - 1; j++) {
            if (proc[j].priority > proc[j + 1].priority) {
                temp = proc[j];
                proc[j] = proc[j + 1];
                proc[j + 1] = temp;
            }
        }
    }
}

void preemptivePriorityScheduling(struct Process proc[], int n) {
    int wait_time[n], turnaround_time[n];
    int total_wait_time = 0, total_turnaround_time = 0;

    sortProcesses(proc, n);

    wait_time[0] = 0;

    for (int i = 1; i < n; i++) {
        wait_time[i] = wait_time[i - 1] + proc[i - 1].burst_time;
        total_wait_time += wait_time[i];
    }

    for (int i = 0; i < n; i++) {
        turnaround_time[i] = wait_time[i] + proc[i].burst_time;
        total_turnaround_time += turnaround_time[i];
    }

    printf("Process ID\tBurst Time\tPriority\tWaiting Time\tTurnaround Time\n");
    for (int i = 0; i < n; i++) {
        printf("%d\t\t%d\t\t%d\t\t%d\t\t%d\n", proc[i].id, proc[i].burst_time, proc[i].priority, wait_time[i], turnaround_time[i]);
    }

    printf("\nAverage Waiting Time: %.2f\n", (float)total_wait_time / n);
    printf("Average Turnaround Time: %.2f\n", (float)total_turnaround_time / n);
}

int main() {
    struct Process proc[] = {
        {1, 10, 2},
        {2, 5, 1},
        {3, 8, 3}
    };
    int n = sizeof(proc) / sizeof(proc[0]);
    preemptivePriorityScheduling(proc, n);
    return 0;
}

